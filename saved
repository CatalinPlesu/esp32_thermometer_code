// Import required libraries
#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <OneWire.h>
#include <DallasTemperature.h>

// Data wire is connected to GPIO 4
#define ONE_WIRE_BUS 15

// Setup a oneWire instance to communicate with any OneWire devices
OneWire oneWire(ONE_WIRE_BUS);

// Pass our oneWire reference to Dallas Temperature sensor
DallasTemperature sensors(&oneWire);

// Variables to store temperature values
String temperatureC = "";

// Timer variables

// Replace with your network credentials
const char *ssid = "StarNet";
const char *password = "022844444";

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

String readDSTemperatureC()
{
  // Call sensors.requestTemperatures() to issue a global temperature and Requests to all devices on the bus
  sensors.requestTemperatures();
  float tempC = sensors.getTempCByIndex(0);

  if (tempC == -127.00)
  {
    Serial.println("Failed to read from DS18B20 sensor");
    return "--";
  }
  else
  {
    Serial.print("Temperature Celsius: ");
    Serial.println(tempC);
  }
  return String(tempC);
}

const char index_html[] PROGMEM = R"rawliteral(
  <!DOCTYPE HTML><html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous"><script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script><style>html{font-family:Arial;display:inline-block;margin:0 auto;text-align:center}h2{font-size:3rem}p{font-size:3rem}.units{font-size:1.2rem}.ds-labels{font-size:1.5rem;vertical-align:middle;padding-bottom:15px}</style></head><body><h2>Server Sera</h2><p id="refresh"><i class="fas fa-thermometer-half" style="color:#059e8a"></i><span class="ds-labels">Temperatura:</span><span id="temperaturec">%TEMPERATUREC%</span><sup class="units">&deg;C</sup></p><hr style="margin-top:100px"><div style="text-align:center;width:100%"><canvas id="myChart" style="width:100%;max-width:700px;display:inline"></canvas></div><div style="text-align:right;width:100%"><input id="clickMe" type="button" value="sterge datele" onclick="Remove()"></div></body><script>var xValues=[],yValues=[];function getTemperature(){var t=new XMLHttpRequest;t.onreadystatechange=function(){var e=-199;t.onreadystatechange=function(){4==this.readyState&&(e=200==this.status?this.responseText:-199)},addData(e),document.getElementById("temperaturec").innerHTML=e},t.open("GET","/temperaturec",!0),t.send()}function Store(){localStorage.setItem("xValues",JSON.stringify(xValues)),localStorage.setItem("yValues",JSON.stringify(yValues))}function Load(){localStorage.getItem("xValues")&&(xValues=JSON.parse(localStorage.getItem("xValues")),yValues=JSON.parse(localStorage.getItem("yValues"))),updateChart()}function Remove(){localStorage.clear(),xValues=[],yValues=[],getTemperature()}function addData(e){xValues.push((new Date).toLocaleString()),yValues.push(e),Store(),updateChart()}function updateChart(){chart.data.labels=xValues,chart.data.datasets[0].data=yValues,chart.update()}window.addEventListener("load",function(){Load(),getTemperature()}),setInterval(function(){getTemperature()},6e4),document.getElementById("refresh").addEventListener("click",function(){getTemperature()});var chart=new Chart("myChart",{type:"line",data:{labels:xValues,datasets:[{borderColor:"rgba(0,25,225,1)",data:yValues}]},options:{legend:{display:!1}}})</script></html>
)rawliteral";

// Replaces placeholder with DS18B20 values
String processor(const String &var)
{
  // Serial.println(var);
  if (var == "TEMPERATUREC")
  {
    return temperatureC;
  }
  return String();
}

void setup()
{
  // Serial port for debugging purposes
  Serial.begin(115200);
  Serial.println();

  // Start up the DS18B20 library
  sensors.begin();

  temperatureC = readDSTemperatureC();

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi");
  int unsigned fails = 0;
  pinMode(BUILTIN_LED, OUTPUT);
  while (WiFi.status() != WL_CONNECTED)
  { 
    fails += 1;
    digitalWrite(BUILTIN_LED, HIGH); // sets the digital pin 13 on
    delay(100);                       // waits for a second
    digitalWrite(BUILTIN_LED, LOW);  // sets the digital pin 13 off
    delay(100);
    Serial.print(".");
    if (fails >= 50){
      digitalWrite(BUILTIN_LED, HIGH); // sets the digital pin 13 on
      delay(1000);      
      Serial.println("failed to connect restarting");
      ESP.restart();
    }
  }
  Serial.println();

  // Print ESP Local IP Address
  Serial.println(WiFi.localIP());

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request)
            { request->send_P(200, "text/html", index_html, processor); });
  server.on("/temperaturec", HTTP_GET, [](AsyncWebServerRequest *request)
            { request->send_P(200, "text/plain", readDSTemperatureC().c_str()); });
  // Start server
  server.begin();
}

void loop()
{
}
